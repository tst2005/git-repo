#!/bin/sh

GITALL_DIRNAME="${GITALL_DIRNAME:-.git_repo.d}"
GITALL_DIR="$(pwd)/${GITALL_DIRNAME}"

_fatal() {
	echo >&2 "ERROR: $1"
	exit 1
}

_initok() { [ -d "$GITALL_DIR" ]; }

_checkdir() {
	_initok || _fatal "No such $GITALL_DIR"
}

usage() {
	echo "Usage: $0 <...>"
}

gitrepo_init() {
	local indir="${1:-.}"
	if _initok; then
		echo "Already initialized"
		return 0
	fi
	(
		cd -- "$indir" && mkdir -- "$GITALL_DIR";
	) || return 1
}

#   baseurl [REMOTE [URL|-]]     get/set/delete the baseurl of a remote
#   origin [REPO [REMOTE|URL|-]] get/set/delete the known origin of a repo


set_url_name() {
        url="${1%/}" # FIXME: rtrip / url
        if [ $# -eq 1 ] || [ -z "$2" ]; then
                name="$(basename "${url}" .git)"
                url="$url/"
	else
		url="$url/"
		name="$2"
	fi
}
autoname_from_url() {
	basename "$1" .git
}

# https://domain.tld/user/repo[.git] ->  https://domain.tld/user/
get_baseurl_from_url() {
	printf '%s/' "$(dirname "$1")"
}
[ "$(get_baseurl_from_url 'scheme://domain.tld/user/repo[.git]')" = 'scheme://domain.tld/user/' ] || echo "INTERNAL error for get_baseurl_from_url"

# https://domain.tld/user/repo[.git] -> user/repo[.git]
get_suffix_from_url() {
	#local urlbase="${1%%/*}" # keep only the first word
	#local suffix="${1#*/}" # the left part without the first word
	local suffix="${1#*://*/}" # scheme://domain.tld/user/repo[.git] -> remove{{scheme://domain.tld/}} -> user/repo[.git]
	# FIXME: how many subart should I eat ? default 0 scheme://domain.tld/subpart1/subpart2/user/repo[.git] eat(2) -> user/repo[.git]
	printf '%s' "$suffix"
}
[ "$(get_suffix_from_url 'scheme://domain.tld/user/repo[.git]')" = 'user/repo[.git]' ] || echo "INTERNAL error for get_suffix_from_url"

# https://domain.tld/user/ -> user
get_name_from_baseurl() {
	basename "$1"
}
[ "$(get_name_from_baseurl 'scheme://domain.tld/user/')" = 'user' ] || echo "INTERNAL error for get_name_from_baseurl"

# user/repo[.git] -> user
get_name_from_suffix() {
	dirname "$1"
}
[ "$(get_name_from_suffix 'user/repo[.git]')" = 'user' ] || echo "INTERNAL error for get_name_from_suffix"



_pathfor() {
	infile="$GITALL_DIR/$1/$2.$1"
}
_exists() {
	[ -f "$infile" ]
}
_read() {
	[ -d "$(dirname "$infile")" ] || return 1
	cat -- "$infile"
}
_write() {
	local dir="$(dirname "$infile")"
	if [ ! -d "$dir" ]; then
		mkdir -- "$dir"
	fi
	printf '%s\n' "$1" > "$infile"
}

gitrepo_set_stuff() {
	local stuff="$1";shift
	case "$stuff" in
		baseurl|origin|upstream) ;;
		*) _fatal "internal error: invalid stuff '$stuff'"
		return 1
	esac
	[ $# -gt 0 ] || return 1

	local name url
	set_url_name "$1" "$2"

	[ -n "$name" ] || _fatal "empty name ?!"

	local infile
	_pathfor "$stuff" "$name"

	if _exists; then
		local value="$(_read)"
		if [ "$value" != "$url" ]; then
			echo "$stuff for $name already exists with a different value ('$value' != '$url')"
			return 1
		fi
	else
		_write "$url"
	fi
}

gitrepo_set_origin() {
	local infile
	_pathfor origin "$2"
	_write "$1" || _fatal "error occured during write of $2"
}

_checkscheme() {
	case "$1" in
		https://*) ;;
		http://*) ;;
		ssh://*) ;;
		*) return 1
	esac
}


# ...repo add https://aa@bb/cc/dd[.git] [localname]
# ...repo add cc/dd[.git] [localname]

gitrepo_addrepo() {
	case "$1" in
		*?://*)
			if ! _checkscheme "$1"; then
				echo "Scheme not supported" ; return 1
			fi
			local baseurl="$(dirname "$1")" # remove the /repo.git suffix
			local name url
			set_url_name "$baseurl" "$2"
			if gitrepo_set_stuff baseurl "$url"; then
			        local localname="${2:-$(autoname_from_url "$1")}"
				local r="${1#*://*/}"
				gitrepo_set_origin "$r" "$localname"
			fi
		;;
		*)
			local base="${1%%/*}" # keep only the first word
			local suffix="${1#*/}" # the left part without the first word
			local infile
			_pathfor baseurl "$base"
			if _exists; then
				local baseurl="$(_read)"
				[ "$baseurl" = "" ] ;# FIXME: check if the value is equal as the one wanted...
				# is pas identique recommande d'utiliser user/suffix  pour ajouter baseurl/user/suffix ?
			else
				gitrepo_set_stuff baseurl "$baseurl"
			fi
			local localname="${2:-$(autoname_from_url "$1")}"
			local infile
			_pathfor origin "$localname"
			_write "$1" || _fatal "error occured during write of $localname"
	esac
}

# gitrepo_set_stuff baseurl https://github.com/tst2005/
# gitrepo_set_stuff baseurl https://github.com/tst2005/ tst2005
# gitrepo_set_stuff origin  tst2005/lunajson
# gitrepo_set_stuff origin  tst2005/lunajson json
# 

_getfullurl() {
	local infile
	_pathfor origin "$1"
	if ! _exists; then
		echo >&2 "no such origin for $1 ($infile)"
		return 1
	fi
	local suffix="$(_read)"
	local base="${suffix%%/*}" # (equal to basename)
	local infile
	_pathfor baseurl "$base" 
	if ! _exists; then
		echo "no such baseurl for $base"
		return 2
	fi
	local baseurl="$(_read)"
	local suffix="${suffix#*/}" # the left part without the first word, who is on the baseurl
	printf %s "$baseurl$suffix"
}

gitrepo_list_one() {
	_checkdir
	local f="$1" ;# "${1%.origin}"
	printf '%-20s %s\n' "$f/" "$(_getfullurl "$f")"
}


gitrepo_list_all() {
	_checkdir
	(
		cd -- "$GITALL_DIR" && \
		for f in origin/*.origin; do
			f="$(basename "$f" .origin)"
			printf '%-20s %s\n' "$f/" "$(_getfullurl "$f")"
		done
	)
}


gitrepo_list() {
	_checkdir

	if [ $# -eq 0 ]; then
		gitrepo_list_all
		return $?
	fi
	for f in "$@"; do
		local infile
		_pathfor origin "$f"
		if _exists; then
			gitrepo_list_one "$f"
		else
			_pathfor origin "${f%.origin}"
			if _exists; then
				gitrepo_list_one "${f%.origin}"
			else
				echo "No such $f"
			fi
		fi
	done
}

gitrepo_clone() {
	local reponame="$1";shift
	
}

gitrepo_parseoptions() {
	local s=0
	while [ $# -gt 0 ]; do
		case "$1" in
			--)			s=$(($s+1)); break ;;
			--help|-h)
				action=help;	s=$(($s+1)); break ;;
			--list|-l)
				action=list;	s=$(($s+1)); break ;;
			--force|-f)
				opt_force=true; s=$(($s+1));;
			--*)
				:
			;;
			-*)
				:
			;;
			*) break
		esac
		shift; s=$(($s+1));
	done
	shift="$s"
}
gitrepo_parseaction() {
	local a="$1"
	case "$a" in
		help) ;;
		init) ;;
		list|ls) a=list ;;
		add|addrepo) a='add';;
		baseurl|origin|upstream) ;;
		*) a=""
	esac
	if [ -z "$a" ]; then
		return 1
	fi
	action="$a"
	return 0
}

gitrepo() {
	local opt_force=false
	local action shift
	gitrepo_parseoptions "$@"
	shift $shift

	# default action
	if [ -z "$action" ]; then
		# if args, try to use the first word as action
		if [ $# -gt 0 ]; then
			if gitrepo_parseaction "$1"; then
				shift
			else
				action=_error_
			fi
		else
			action="help"
		fi
	fi
	case "$action" in
		help)
			usage; exit 0;;
		init)
			gitrepo_init "$@" ;;
		add|addrepo)
			gitrepo_addrepo "$@"
		;;
		baseurl|origin|upstream)
			gitrepo_set_stuff "$action" "$@"
		;;
		list)
			gitrepo_list "$@"
		;;
		_error_) echo error ;;
		*)
			echo "SHOULD NOT APPEND !!!!!!!!"
			if [ $# -eq 0 ]; then
				gitrepo_list "$@"
			else
				usage
			fi
	esac
}
gitrepo "$@"

